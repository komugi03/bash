#!/bin/bash
# 
# 形式: count-line-numbers 任意の個数のファイルパス
# 
# 概要: 指定されたファイルパスごとに、「ファイルパス: 行数」の行を出力する。
# 
# パラメータ: 
# 　任意の個数のファイルパス
# 
# リターンコード: 
# 　正常終了時: 0
# 　ファイル読み込み失敗: 1
# 

# --- 定数定義 ---

# リターンコード: 正常終了時
declare -ri RC_SUCCESS=0
# リターンコード: ファイル読み込み失敗
declare -ri RC_NOT_EXIST_FILE=1


# --- 関数定義 ---

# エラーを出力して終了する
# $1: エラーメッセージ
function error() {
    local -r message=$1
    echo "${message}" >&2
}

# パラメータが入力されているかを判定する
function enter_parameter_or_not() {
    if (( $#=0 )); then
        exit
    fi
}

# ファイルが存在しているかどうかを判定し、
# 存在していなかったらエラー文を標準エラー出力に出力する。
# $1: 判定するファイルパス
function exist_or_not() {
    local file_name=$1
    if [ ! -e file_name ]; then
        error "エラー: ファイル $file_name の処理中にエラーが発生しました。"
        exit ${RC_NOT_EXIST_FILE}
    fi
}

# パラメータを受け取る　→必要ないかも？
# $1: パラメータ
# function get_parameter() {}

# 指定されたファイルパスの行数をカウントする
# $1: 指定ファイルパス
function count_line_numbers() {
    local file_name=$1
    exist_or_not "${file_name}"
    < test.txt wc -l
}


# カウントした行数を表示する
# function display_count_line_numbers() {
    
# }


# --- パラメータチェック ---


# --- 主処理 ---

declare -r i

for i in $(seq $#)
do
    declare -r parameter=$1
    # 引数うけとり
    enter_parameter_or_not
    count_line_numbers "${parameter}"
    echo "parameter: count_line_numbers"
done

exit ${RC_SUCCESS}