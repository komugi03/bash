#!/bin/bash

# 
# 概要: 左項値と右項値を演算した値を以下の形式で標準出力に出力する。
# 
# 形式: <左項値> <演算子> <右項値> = <演算結果>
# 
# パラメータ: 
# 　なし
# 
# リターンコード: 
# 　正常終了時: 0
# 

# --- 定数定義 ---

# リターンコード: 成功
declare -ri RC_SUCCESS=0

# 期待する演算子
declare -r EXPECTED_OPERATORS="+*/-"

# 


# --- 関数定義 ---

# エラーを出力して終了する
# $1: エラーメッセージ
function error() {
    local -r message=$1
    echo "${message}">&2
}

# 値が期待した演算子かどうかを判定する
# $1: 値
function is_operator() {
    local -r value=$1
    [[ value =~ ^[${EXPECTED_OPERATORS}]$ ]]
}

# 値が整数かどうかを判定する
# $1: 値
function is_integer() {
    local -r value=$1
    [[ value =~ ^[+-]?[0-9]+$ ]]
}

# ゼロ除算をしているかどうかを判定する
# $1: 値
function division_by_zero() {
    local -r value=$1
    [[ value =~ ^0+$ ]]
}

# --- パラメータチェック ---

# $1: 第一引数
# $2: 
# $3: 

# 不正な演算子チェック
if ! is_operator "$1"; then
    error "エラー: 不正な演算子が入力されました。"
    operator

# 左項値整数値チェック
elif ! is_integer "$2"; then
    error "エラー: 整数以外の値が入力されました。"
    left_check

# 右項値整数値チェック
elif ! is_integer "$3"; then
    error "エラー: 整数以外の値が入力されました。"
    right_check

# ゼロ除算チェック
elif ! division_by_zero "$3"; then
    error "エラー: ゼロで除算しようとしました。"
fi

# --- 主処理 ---

# 処理継続するか？のループ

while :
    do
        # 演算子

        # 左項値
        
        # 右項値
        
        # yes/no
    done
exit ${RC_SUCCESS}