#!/bin/bash
# 
# 形式: count-line-numbers-2 任意の個数のファイルパス
# 
# 概要: 指定されたファイルパスごとに、「ファイルパス: 行数」の行を出力する。
# 
# パラメータ: 
# 　任意の個数のファイルパス
# 
# リターンコード: 
# 　正常終了時: 0
# 　ファイル読み込み失敗: 1
# 

# --- 定数定義 ---
# リターンコード: 正常終了時
declare -ri RC_SUCCESS=0
# リターンコード: ファイル読み込み失敗
declare -ri RC_NOT_EXIST_FILE=1


# --- 関数定義 ---

# エラーを出力して終了する
# $1: エラーメッセージ
# $2: リターンコード
error() {
    local -r message=$1
    local -ri return_code=$2

    echo "${message}" >&2
    exit "${return_code}"
}

# 指定されたファイルパスのファイルが存在しているかどうかを判定する。
# $1: ファイルパス
function is_exist() {
    local file_name=$1
    [ -e "${file_name}" ]
}

# 指定されたファイルパスのファイルの行数をカウントする。
# $1: ファイルパス
function count_line_numbers() {
    local file_name=$1
    < "${file_name}" grep -c ''
}

# --- 主処理 ---

# 引数を1つずつ配列に入れる。
# ファイル名として「-」が指定された場合は、その部分のファイルリストとして標準入力を用いる。
declare file_path
declare -a array=()
declare counter=0
declare contents_of_list

for file_path in "$@"; do
    if [[ ${file_path} -eq '-' && ! -t 0 ]]; then
        while read -r contents_of_list || [[ -n "${contents_of_list}" ]]; do
            if [[ -n "${contents_of_list}" ]]; then
                array[${counter}]=${file_path}
                count=$((++count))
            fi
        done
    # file_path が - で、＜がない場合はエラーを標準エラー出力に出力して終了。
    elif [[ ${file_path} -eq '-' && -t 0 ]]; then
        error "エラー: 入力元を入力してください。" "${RC_NOT_EXIST_FILE}"
        count=$((++count))
    else
        array[${counter}]=${file_path}
        count=$((++count))
    fi
done

# ファイル名として「-」が指定されなかった場合で、かつ標準入力が存在する場合は、
# ファイルリストの末尾にその部分のファイルリストとして標準入力を用いる。
if [[ ! -t 0 ]]; then
    while read -r contents_of_list || [[ -n "${contents_of_list}" ]]; do
        if [[ -n "${contents_of_list}" ]]; then
            array+=( "${file_path}" )
        fi
    done
fi

# 配列の中身の行数を1つずつカウントし、その結果を表示する。
# ファイルの読み込みに失敗した場合はエラー文を出力する
declare file_name_inputed
declare result_count_line_numbers

for file_name_inputed in "${array[@]}"; do
    if is_exist "${file_name_inputed}"; then
        result_count_line_numbers="$(count_line_numbers "${file_name_inputed}")"
    else
        error "エラー: ファイル $file_name_inputed の処理中にエラーが発生しました。" "${RC_NOT_EXIST_FILE}"
    fi
    echo "${file_name_inputed}": "${result_count_line_numbers}"
done

exit ${RC_SUCCESS}